plugins {
    id 'fabric-loom' version '0.12.21'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name "SquidDev"
        url "https://squiddev.cc/maven"
    }

    // CC: Restitched and transitive dependencies
    maven { url "https://jitpack.io" } // TODO: CC:R on Maven?
    maven { url "https://maven.shedaniel.me" } // cloth-config-fabric etc.
    maven { url "https://maven.terraformersmc.com/releases" } // Mod Menu
    maven { url "https://maven.terraformersmc.com/" } // Trinkets
    maven { url "https://ladysnake.jfrog.io/artifactory/mods" } // Satin, Trinkets, Cardinal Components
}

sourceSets {
    main.resources {
        srcDir "src/generated/resources"
    }
}

loom {
    accessWidenerPath = file("src/main/resources/plethora.accesswidener")

    runs {
        data {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"

            runDir "build/datagen"
        }
    }
}

assemble.dependsOn runData

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // CC: Restitched
    modApi "com.github.cc-tweaked:cc-restitched:${cc_version}"

    // Configurate and its transitive dependencies
    modImplementation(include("com.typesafe:config:1.4.1"))
    modImplementation(include("io.leangen.geantyref:geantyref:1.3.11"))
    modImplementation(include("org.spongepowered:configurate-core:${configurate_version}"))
    modImplementation(include("org.spongepowered:configurate-hocon:${configurate_version}"))

    modImplementation("io.github.ladysnake:satin:${satin_version}")
    modImplementation("dev.emi:trinkets:${trinkets_version}")

    // Fixes @Nonnull and @Nullable annotations
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    modApi("me.shedaniel.cloth:cloth-config-fabric:6.2.57") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

remapJar {
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

runClient {
    jvmArgs "-Dmixin.debug.export=true"
}